(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{580:function(t,n,e){"use strict";e.r(n);var s=e(12),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("hr"),t._v(" "),e("h1",{attrs:{id:"script-标签引入模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#script-标签引入模式"}},[t._v("#")]),t._v(" <script>标签引入模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<!DOCTYPE html>\n<html>\n    <head>\n        <title>vue2</title>\n        <script src=\"https://cdn.jsdelivr.net/npm/vue@2\"><\/script>\n    </head>\n\n    <body>\n        <div id=\"app\">\n            <h1>{{name}}</h1>\n            <h1 v-bind:title=\"ok\">{{message}}</h1>\n            <h1 v-if=\"show\">{{show}}</h1>\n            <h1 v-for=\"todo in todos\">{{todo.text}}</h1>\n            <div>\n                <h1>{{message}}</h1>\n                <button v-on:click=\"reverseMessage\">反转message</button>\n            </div>\n            <div>\n                <h1>{{input}}</h1>\n                <input v-model=\"input\" />\n            </div>\n\n            <test-item \n                v-for=\"todo in todos\"\n                v-bind:item=\"todo\"\n                v-bind:key=\"todo.text\"\n            ></test-item>\n\n        </div>\n        <script>\n            Vue.component('test-item', {\n                props: ['item'],\n                template: '<h1>定义组件必须放在初始化Vue实例之前<span>{{item.text}}</span></h1>',\n            })\n\n            var app = new Vue({         // 每个html文件只能创建一个vue对象\n                el: '#app',\n                data: {\n                    name: 'demo',\n                    message: 'Hello World!',\n                    ok: 'ok' + new Date().toLocaleDateString(),\n                    show: true,\n                    todos: [\n                        {text: '1'},\n                        {text: '2'},\n                        {text: '3'}\n                    ],\n                    input: 'v-model绑定数据'\n                },\n                methods: {\n                    reverseMessage: function() {\n                        this.message = this.message.split('').reverse().join('');\n                    }\n                }\n            })\n\n            // 只有当实例创建时就存在于data中的property才是响应式的\n        <\/script>\n    </body>\n    \n</html>\n")])])]),e("h3",{attrs:{id:"注意⚠️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意⚠️"}},[t._v("#")]),t._v(" 注意⚠️")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("不要在选项 property 或回调上使用箭头函数。\n比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。\n因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，\n经常导致 Uncaught TypeError: Cannot read property of undefined 或 \nUncaught TypeError: this.myMethod is not a function 之类的错误。\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);